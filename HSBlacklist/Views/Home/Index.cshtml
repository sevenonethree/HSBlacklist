@using HSBlacklist.Models;
@using PagedList.Mvc;
@model EmployeeSearchViewModel

@Scripts.Render("~/bundles/jquery")
@Styles.Render("~/Content/datatables")
@Scripts.Render("~/Scripts/datatables")


<div class="jumbotron">
    <h1>Search for an employee</h1>
    <div class="row">
        @using (Html.BeginForm("Index", "Home", FormMethod.Get))
        {
            @Html.ValidationSummary(false)
            <fieldset>
                <div class="editor-label">
                    @Html.LabelFor(m => m.SearchParameters)
                </div>
                <div class="editor-field">
                    @Html.EditorFor(m => m.SearchParameters)
                    <p>You can search based on Name, JobTitle, Email Address, or Location</p>
                    @Html.ValidationMessageFor(m => m.SearchParameters)
                </div>
                <br />
                <p>
                    <input name="SearchButton" type="submit" value="Perform Search" class="btn btn-primary" />
                </p>
            </fieldset>
        }
    </div>
</div>

<div class="row">
    <h2>Employee Results</h2>
    <table class="table table-bordered table-striped" id="employeeTable">
        <thead>
            <tr>
                <td>Name</td>
                <td>Job Title</td>
                <td>Email Address</td>
                <td>Phone</td>
                <td>Location</td>
                <td><br /></td>
            </tr>
        </thead>

        <tbody>
            @foreach (var item in Model.Results)
            {
                var employee = item;
                <tr>
                    <td>@Html.DisplayFor(m => employee.Name)</td>
                    <td>@Html.DisplayFor(m => employee.JobTitle)</td>
                    <td>@Html.DisplayFor(m => employee.Email)</td>
                    <td>@Html.DisplayFor(m => employee.Phone)</td>
                    <td>@Html.DisplayFor(m => employee.Location)</td>
                    <td>@Html.ActionLink("View", "Details", new { employeeToView = item.Id })</td>
                </tr>
            }
        </tbody>
        <tfoot>
            <tr>
                <td colspan="6">
                    <ul class="pager">
                        <li class="previous">
                            <a href="?Page=@(Model.Page > 1 ? Model.Page - 1 : 1)" class="disabled">&larr; Older</a>
                        </li>
                        <li class="next">
                            <a href="?Page=@(Model.Page < Model.NumberOfPages ? Model.Page + 1 : Model.NumberOfPages)" class="@Model.Page == @Model.NumberOfPages ? disabled : ''">Newer &rarr;</a>
                        </li>
                        @*<li></li>
                        @for (int p = 1; p <= Model.NumberOfPages;p++)
                        {
                            <li><a href="?Page=@p">@p</a></li>
                        }*@
                    </ul>
                    @*@Html.PagedListPager(Model.Results,
                        page => Url.Action("Index", new RouteValueDictionary()
                            {
                                {"Page" , page},
                                {"SearchParameters", Model.SearchParameters}

                            }), PagedListRenderOptions.OnlyShowFivePagesAtATime)*@
                </td>
            </tr>
        </tfoot>
    </table>
</div>
 